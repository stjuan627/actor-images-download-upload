{
    "title": "Images upload input",
    "type": "object",
    "schemaVersion": 1,
    "required": [],
    "properties": {
        "datasetId": {
            "title": "Dataset Id",
            "type": "string",
            "description": "Id of the dataset where the data are located. Image URLs will be extracted from there.",
            "editor": "textfield"
        },
        "pathToImageUrls": {
            "title": "Path to image URLs",
            "type": "string",
            "description": "Path from item object to an array or string where the URL(s) is/are located. Provide in \"javascript style\", e.g. \"details[0].images\n",
            "editor": "textfield",
            "prefill": "images"
        },
        "fileNameFunction": {
            "title": "Filename function",
            "type": "string",
            "description": "Function that specifies how will be image filename created from its URL. If you keep this empty, it will be md5 hash of the URL.",
            "editor": "javascript",
            "prefill": "(url, md5) => md5(url)"
        },
        "limit": {
            "title": "Limit",
            "type": "integer",
            "description": "Max items to load from the dataset. Use with `offset` to paginate over the data (can reduce memory requirement of large loads).",
            "minimum": 0,
            "sectionCaption": "Input/Output options",
            "sectionDescription": "More options for input data and where output data will be saved. Output data are transformed input data, not images. For them use upload options"
        },
        "offset": {
            "title": "Offset",
            "type": "integer",
            "description": "How many items to skip from the dataset. Use with `limit` to paginate over the data (can reduce memory requirement of large loads)",
            "minimum": 0
        },
        "outputTo": {
            "title": "Output to",
            "type": "string",
            "description": "Where to save the data from input after possibly transforming them during the download process.",
            "enum": ["no-output", "key-value-store", "dataset"],
            "prefill": "no-output"
        },
        "storeInput": {
            "title": "Key Value store input",
            "type": "string",
            "description": "If you want to input the data from key-value store instead of dataset. Notation: `storeId-recordKey`, e.g. - `kWdGzuXuKfYkrntWw-OUTPUT`",
            "editor": "textfield"
        },
        "uploadTo": {
            "title": "Upload to",
            "type": "string",
            "description": "Where do you want to upload the image files",
            "enum": ["key-value-store", "s3", "oss", "no-upload"],
            "sectionCaption": "Image upload options"
        },
        "uploadStoreName": {
            "title": "Key-value store name",
            "type": "string",
            "description": "Key-value store name where the images will be upload. Empty field means it will be uploaded to the default key-value store",
            "editor": "textfield"
        },
        "s3Bucket": {
            "title": "S3 Bucket",
            "type": "string",
            "description": "Only relevant if you want to upload to S3! Name of the bucket where to upload.",
            "editor": "textfield"
        },
        "s3AccessKeyId": {
            "title": "S3 Access key id",
            "type": "string",
            "description": "Only relevant if you want to upload to S3! You can create these credentials for IAM user.",
            "editor": "textfield"
        },
        "s3SecretAccessKey": {
            "title": "S3 Secret access key",
            "type": "string",
            "description": "Only relevant if you want to upload to S3! You can create these credentials for IAM user.",
            "editor": "textfield"
        },
        "s3CheckIfAlreadyThere": {
            "title": "Check if key is already on S3",
            "type": "boolean",
            "description": "This option is useful if you don't want to rewrite the same image. GET requests are also cheaper than PUT requests"
        },
        "ossRegion": {
            "title": "OSS Region",
            "type": "string",
            "description": "Only relevant if you want to upload to OSS! Name of the bucket where to upload.",
            "editor": "textfield"
        },
        "ossBucket": {
            "title": "OSS Bucket",
            "type": "string",
            "description": "Only relevant if you want to upload to OSS! Name of the bucket where to upload.",
            "editor": "textfield"
        },
        "ossAccessKeyId": {
            "title": "OSS Access key id",
            "type": "string",
            "description": "Only relevant if you want to upload to OSS! You can create these credentials for IAM user.",
            "editor": "textfield"
        },
        "ossAccessKeySecret": {
            "title": "OSS access key secret",
            "type": "string",
            "description": "Only relevant if you want to upload to OSS! You can create these credentials for IAM user.",
            "editor": "textfield"
        },
        "preDownloadFunction": {
            "title": "Pre-download function",
            "type": "string",
            "description": "Function that specifies how will be the data transformed before downloading the image. The input and output of the function is the whole data array. You can skip downloading images of any item if you add skipItem: true field to it.",
            "editor": "javascript",
            "prefill": "/* Example: We get rid of the items with price 0\n({ data }) => data.filter((item) => item.price > 0)\n*/",
            "sectionCaption": "Transforming functions",
            "sectionDescription": "You can use these functions to transform your data before and/or after the image download process."
        },
        "postDownloadFunction": {
            "title": "Post-download function",
            "type": "string",
            "description": "Function that specifies how will be the data transformed before downloading the image. The input and output of the function is the whole data array. By default it adds either the file URL or errors array depending if the download was successfull.",
            "editor": "javascript",
            "prefill": "/* Example: We remove items without any successfully uploaded images.\n We also remove any image URLs that were not uploaded\n \n ({ data, state }) => {\n    return data.reduce((newData, item) => {\n        const downloadedImages = item.images.filter((imageUrl) => {\n            return state[imageUrl] && state[imageUrl].imageUploaded;\n        });\n        \n        if (downloadedImages.length === 0) {\n            return newData;\n        }\n        \n        return newData.concat({ ...item, images: downloadedImages });\n    }, []);\n}\n*/"
        },
        "imageCheckMaxRetries":{
            "title": "Max retries",
            "type": "integer",
            "description": "How many times should actor retry if the file it tries to download fails to pass the tests. Setting this too high can lead to unecessary loops.",
            "minimum": 0,
            "default": 1,
            "sectionCaption": "Image quality check options"
        },
        "imageCheckType": {
            "title": "Image check type",
            "type": "string",
            "description": "Type of the image check. If the image will not pass, the download will be retied with proxy and if that doesn't pass, the image is not uploaded.",
            "enum": ["none", "content-type", "image-size"],
            "prefill": "content-type"
        },
        "imageCheckMinSize":{
            "title": "Min size in KB",
            "type": "integer",
            "description": "Minimum size of the image to pass the image check test",
            "minimum": 1
        },
        "imageCheckMinWidth":{
            "title": "Min width",
            "type": "integer",
            "description": "Minimim width of the image in pixels to pass the image check. Works only if the image check type is 'jimp'.",
            "minimum": 1
        },
        "imageCheckMinHeight":{
            "title": "Min height",
            "type": "integer",
            "description": "Minimim height of the image in pixels to pass the image check. Works only if the image check type is 'jimp'.",
            "minimum": 1
        },
        "proxyConfiguration": {
            "title": "Proxy configuration",
            "type": "object",
            "description": "Select proxies to be used.",
            "prefill": { "useApifyProxy": true },
            "editor": "proxy",
            "sectionCaption": "Miscellaneous options"
        },
        "maxConcurrency":{
            "title": "Max concurrency",
            "type": "integer",
            "description": "You can specify how many maximum parallel downloading/uploading requests will be running. Keep in mind that the limit is here to not overload the host server.",
            "default": 40
        },
        "downloadTimeout": {
            "title": "Download timeout in ms",
            "type": "integer",
            "description": "How long we will wait to download each image",
            "minimum": 100,
            "default": 7000
        },
        "batchSize": {
            "title": "Batch Size",
            "type": "integer",
            "description": "Number of items loaded from dataset in one batch.",
            "minimum": 1,
            "default": 10000
        },
        "convertWebpToPng": {
            "title": "Convert webp to png",
            "type": "boolean",
            "description": "If checked, the actor will automatically convert all webp type images to standard png. This increases the size of the image."
        },
        "stateFields": {
            "title": "State fields",
            "type": "array",
            "editor": "json",
            "description": "You can specify fields that you want in your state to make it more readable and use less memory. By default it uses all."
        },
        "noDownloadRun": {
            "title": "Run without download",
            "type": "boolean",
            "description": "If checked, the actor will not download and upload the images. Usefull for checking duplicates or transformations."
        }
    }
}
